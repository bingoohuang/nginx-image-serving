worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type text/html;

    keepalive_timeout  65;
    charset utf-8;

    client_max_body_size 50m;
    lua_package_path ';;$prefix/conf/?.lua;';
    #error_log logs/error.log error;
    error_log logs/error.log info;

    # 灰度发布用的指定TID列表，当处于列表中的TID时，路由指向灰度服务
    lua_shared_dict grayDict 1m; # 注意命名，后续会用到

    # 老版本服务列表
    upstream version.prev { # 注意命名，后续会用到
        server 127.0.0.1:7701;
        server 127.0.0.1:7702;
        server 127.0.0.1:7703;
        server 127.0.0.1:7704;
    }

    # 灰度版本服务列表，默认需要全部设置为down
    upstream version.gray { # 注意命名，后续会用到
        server 127.0.0.1:7701 down;
        server 127.0.0.1:7702 down;
        server 127.0.0.1:7703 down;
        server 127.0.0.1:7704 down;
    }

    # 升级中页面
    upstream version.doing {
        server 127.0.0.1:7777; # 注意命名，后续会用到
    }

    server {
        listen       7871;

        # ~/o/nginx > sbin/nginx -c conf/nginx-gray.conf -s reload
        # ~/o/nginx > curl "http://localhost:7871/gray/show"
        # upstream version.p1:
        # fails = 0, weight = 1, max_fails = 1, id = 0, fail_timeout = 10, effective_weight = 1, name = # 127.0.0.1:7701, current_weight = 0,
        # weight = 1, id = 1, fail_timeout = 10, fails = 0, current_weight = 0, down = true, # effective_weight = 1, name = 127.0.0.1:7702, max_fails = 1,
        # fails = 0, weight = 1, max_fails = 1, id = 2, fail_timeout = 10, effective_weight = 1, name = # 127.0.0.1:7703, current_weight = 0,
        # fails = 0, weight = 1, max_fails = 1, id = 3, fail_timeout = 10, effective_weight = 1, name = # 127.0.0.1:7704, current_weight = 0,
        # upstream version.p2:
        # fails = 0, weight = 1, max_fails = 1, id = 0, fail_timeout = 10, effective_weight = 1, name = # 127.0.0.1:7701, current_weight = 0,
        # fails = 0, weight = 1, max_fails = 1, id = 1, fail_timeout = 10, effective_weight = 1, name = # 127.0.0.1:7702, current_weight = 0,
        # fails = 0, weight = 1, max_fails = 1, id = 2, fail_timeout = 10, effective_weight = 1, name = # 127.0.0.1:7703, current_weight = 0,
        # fails = 0, weight = 1, max_fails = 1, id = 3, fail_timeout = 10, effective_weight = 1, name = # 127.0.0.1:7704, current_weight = 0,
        location = /gray/show {
            allow 127.0.0.1; # 管理URL，必须设定只允许从指定IP访问
            default_type text/plain;
            content_by_lua_block {
                require("poet.gray").showStatus{grayDict = "grayDict"}
            }
        }

        # curl "http://localhost:7871/gray/doing?tids=01"
        location = /gray/doing {
            allow 127.0.0.1; # 管理URL，必须设定只允许从指定IP访问
            content_by_lua_block {
                require("poet.gray").grayDoing{
                    tids = ngx.var.arg_tids,
                    grayDict = "grayDict"
                }
            }
        }

        # curl "http://localhost:7871/gray/admin?tids=01,02&peers=127.0.0.1:7701,127.0.0.1:7702"
        location = /gray/admin {
            allow 127.0.0.1; # 管理URL，必须设定只允许从指定IP访问
            content_by_lua_block {
                require("poet.gray").grayAdmin{
                    tids = ngx.var.arg_tids,
                    peers = ngx.var.arg_peers,
                    versionPrev = "version.prev",
                    versionGray = "version.gray",
                    grayDict = "grayDict"
                }
            }
        }

        # curl "http://localhost:7871/gray/test?tid=01"
        location = /gray/test {
            set $grayRoute "";
            rewrite_by_lua_block {
                ngx.var.grayRoute = require("poet.gray").queryGrayRoute{
                    tid = ngx.var.arg_tid,
                    versionPrev = "version.prev",
                    versionGray = "version.gray",
                    versionDoing = "version.doing",
                    grayDict = "grayDict"
                }
            }
            proxy_pass http://$grayRoute/gray/test;
        }

        location = /gray/complete {
            allow 127.0.0.1; # 管理URL，必须设定只允许从指定IP访问
            content_by_lua_block {
                require("poet.gray").grayComplete{
                    versionPrev = "version.prev",
                    versionGray = "version.gray",
                    grayDict = "grayDict"
                }
            }
        }

        location = /prev {
            proxy_pass http://version.prev;
        }
        location = /gray {
            proxy_pass http://version.gray;
        }
    }

    server {
        listen       7701;
        default_type text/html;

        location /gray/test {
            echo "I am 7701";
        }
    }
    server {
        listen       7702;
        default_type text/html;

        location /gray/test {
            echo "I am 7702";
        }
    }
    server {
        listen       7703;
        default_type text/html;

        location /gray/test {
            echo "I am 7703";
        }
    }
    server {
        listen       7704;
        default_type text/html;

        location /gray/test {
            echo "I am 7704";
        }
    }
    server {
        listen       7777;
        default_type text/html;

        location /gray/test {
            echo "程序猿正在努力的升级系统，请喝杯咖啡后再试";
        }
    }
}
