worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type text/html;

    sendfile        on;
    keepalive_timeout  65;
    charset utf-8;

    client_max_body_size 10m;
    lua_package_path ';;$prefix/conf/?.lua;';

    server {
        listen       8001;
        server_name  localhost;

        #lua_code_cache off;

        location = /upload {
            content_by_lua '
                local uploader = require "poet.uploader"

                local maxSize = ngx.var.arg_maxSize
                local suffix = ngx.var.arg_suffix
                local path = ngx.var.arg_path

                uploader.upload(maxSize, suffix, path)
            ';
        }

        location @image_server {
            content_by_lua '
                local imager = require "poet.imager"
                imager.magick_thumb("images/", "cache/", "securet",
                    ngx.var.sig, ngx.var.size, ngx.var.path, ngx.var.ext)
            ';
        }

        location ~ ^/images/(?<sig>[^/]+)/(?<size>[^/]+)/(?<path>.*\.(?<ext>[a-z_]*))$ {
            root cache;
            set_md5 $digest "$size/$path";
            try_files /$digest.$ext @image_server;
        }

        # This is a debug location that we can use to generate valid signed urls
        location ~ ^/gen/(.*)$ {
            set $path $1;
            content_by_lua '
                local imager = require "poet.imager"
                imager.generate_signature("securet", ngx.var.path)
            ';
        }

        # http://localhost:8001/strip/85/images/02-lrg.jpg
        location ~ ^/strip/(?<quality>\d+)/(?<path>.*)\.(?<ext>[a-z_]*)$  {
            content_by_lua '
                -- convert -strip -quality 55 02-lrg.jpg 02-lrg.strip.jpg
                -- convert -resize "500x300" -strip -quality 85 input.jpg output.jpg
                local magick = require("poet.magick")
                local img = assert(magick.load_image(ngx.var.path .. "." .. ngx.var.ext))
                img:set_quality(tonumber(ngx.var.quality))
                img:strip()
                img:write(ngx.var.path .. ".min." .. ngx.var.ext)
                img:destroy()
                ngx.header["Content-type"] = "text/html"
                ngx.say(ngx.var.quality .. ":" .. ngx.var.path .. ":" .. ngx.var.ext)
            ';
        }
        location / {
            root html;
        }
    }

}
