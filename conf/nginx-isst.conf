worker_processes  2;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    lua_package_path ';;$prefix/conf/?.lua;';

    keepalive_timeout  65;
    lua_shared_dict mysqldict_demo 128m;
    lua_shared_dict mysqlDict_lock 100k;

    server {
        listen       9001;
        server_name  localhost;
        default_type 'text/plain';

        # curl  "http://127.0.0.1:9001/isst?game_conf_id=1&game_id=1"
        location /isst {

            rewrite_by_lua_block {
                local cachedConf = require("poet.mysqldict").get{
                    key = ngx.var.arg_game_conf_id,
                    dataSourceName = "root:my-secret-pw@192.168.99.100:13306/dba",
                    --[[ 准备测试数据的SQL脚本：
                    drop table isst_game_conf;
                    create table isst_game_conf(id int primary key, name varchar(100), max_onlines int, expired_seconds int ) default charset=utf8;
                    insert into isst_game_conf values (1, '塔罗牌1', 1, 10), (2, '塔罗牌2', 2, 20), (3, '塔罗牌3', 3, 30);
                    --]]
                    queryAllSql = [[select id, name, max_onlines maxOnlines, expired_seconds expiredSeconds from isst_game_conf]],
                    pkColumnName = "id",
                    luaSharedDictName = "mysqldict_demo",
                    dictLockName = "mysqlDict_lock",
                    prefix = "isst_game_conf",
                    timerDurationSeconds = 10
                }
                if not cachedConf then ngx.exit(404) end

                local maxOnlines = cachedConf.maxOnlines

                local redis = require("poet.redis_iresty"):new()
                local key = "isst_game:" .. ngx.var.arg_game_conf_id  .. ":" .. ngx.var.arg_game_id
                local val, err = redis:get(key)
                ngx.log(ngx.ERR, "current val ", val, ", max onlines ", maxOnlines)

                if  val and tonumber(val) >= tonumber(maxOnlines) then
                    -- exceed max onlines
                    ngx.req.set_uri("/maxonlines", true)
                else
                    redis:incr(key)
                    redis:expire(key, cachedConf.expiredSeconds)
                end
            }

            echo "demo";
        }

        location /maxonlines {
            echo "reached max onlines";
        }
    }
}
